{"version":3,"sources":["logo.svg","Board/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Board","useState","Array","fill","map","row","board","Set","snakeCells","setSnakeCells","LinkedList","snakeList","foodCell","setFoodCell","currentDirection","IntervalVar","score","setScore","dead","setDead","begin","setBegin","move","direction","directionValue","head","data","clearInterval","insertFirst","parseInt","add","has","console","log","delete","remove","newFood","Math","floor","random","newSnakeCells","useEffect","window","addEventListener","e","key","restrictedDirection","setInterval","className","onClick","location","reload","rowIndex","keu","cell","cellIndex","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8eaf4c75.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react'\r\nimport LinkedList from 'singly-linked-list'\r\nimport './Board.css'\r\nimport { randomInt } from '../lib/utils.js'\r\n\r\nconst Board = () => {\r\n    // class Node {\r\n    //     constructor(element)\r\n    //     {\r\n    //         this.element = element;\r\n    //         this.next = null\r\n    //     }\r\n    // }\r\n    // class SinglyLinkedList {\r\n    //     constructor()\r\n    //     {\r\n    //         this.head = null;\r\n    //         this.tail = null;\r\n    //         this.size = 0;\r\n    //     }\r\n    //     add(element){\r\n    //         const newNode = new Node(element);\r\n    //         if(this.size == 0){\r\n    //             this.head = newNode;\r\n    //             this.tail = newNode;\r\n    //             this.size++;\r\n    //         }else{\r\n    //             this.head.next = newNode;\r\n    //             this.head = newNode;\r\n    //             this.size++;\r\n    //         }\r\n    //         return newNode;\r\n    //     }\r\n    //     removeLast(){\r\n    //         if(this.size==0) return null;\r\n    //         const current = this.tail;\r\n    //         if(this.size==1){\r\n    //             this.size--;\r\n    //             this.head = null;\r\n    //             this.tail = null;\r\n    //             return current;\r\n    //         }\r\n    //         this.tail = this.tail.next;\r\n    //         this.size--;\r\n    //         return current;\r\n    //     }\r\n    // }\r\n\r\n\r\n    const BOARD_SIZE = 10\r\n    const [board, setBoard] = useState(\r\n        new Array(BOARD_SIZE).fill(0).map(row => new Array(BOARD_SIZE).fill(0)),\r\n    )\r\n    var [snakeCells, setSnakeCells] = useState(new Set([43, 44]))\r\n    var [snakeList, setSnakeList] = useState(new LinkedList([44, 43]))\r\n    var [foodCell, setFoodCell] = useState(48)\r\n    var [currentDirection, setCurrentDirection] = useState('ArrowRight')\r\n    var [IntervalVar, setIntervalVar] = useState(null)\r\n    var [score, setScore] = useState(0)\r\n    var [dead, setDead] = useState(false)\r\n    var [begin, setBegin] = useState(false)\r\n    // const [snakeHead, setSnakeHead] = useState(44)\r\n    // const [snakeTail, setSnakeTail] = useState(33)\r\n\r\n    // //return the cellType snake/food/board from index\r\n    // window.addEventListener('keydown', e=>{\r\n\r\n    // })\r\n    function cellType(index) {\r\n        if (index === foodCell) return 'food'\r\n        if (snakeCells.has(index)) {\r\n            return 'snake'\r\n        } else return ''\r\n\r\n    }\r\n\r\n    //demo move right\r\n    function move(direction) {\r\n        if (begin === false) return\r\n        var directionValue\r\n        switch (direction) {\r\n            case 'ArrowRight':\r\n                directionValue = 1\r\n                break\r\n            case 'ArrowLeft':\r\n                directionValue = -1\r\n                break\r\n            case 'ArrowUp':\r\n                directionValue = -10\r\n                break\r\n            case 'ArrowDown':\r\n                directionValue = 10\r\n                break\r\n            default:\r\n                directionValue = 1;\r\n                break\r\n\r\n        }\r\n\r\n        if (snakeList.head.data % 10 === 9 && directionValue === 1) {\r\n            clearInterval(IntervalVar)\r\n            dead = true\r\n            setDead(dead)\r\n            return\r\n        }\r\n\r\n        if (snakeList.head.data % 10 === 0 && directionValue === -1) {\r\n            clearInterval(IntervalVar)\r\n            dead = true\r\n            setDead(dead)\r\n            return\r\n        }\r\n        if (snakeList.head.data < 10 && directionValue === -10) {\r\n            clearInterval(IntervalVar)\r\n            dead = true\r\n            setDead(dead)\r\n            return\r\n        }\r\n        if (snakeList.head.data > 90 && directionValue === 10) {\r\n            clearInterval(IntervalVar)\r\n            dead = true\r\n            setDead(dead)\r\n            return\r\n        }\r\n        snakeList.insertFirst(parseInt(snakeList.head.data + directionValue))\r\n        const add = snakeList.head.data\r\n        if (snakeCells.has(add)) {\r\n            clearInterval(IntervalVar)\r\n            return\r\n        }\r\n        // const remove = snakeList.remove().data\r\n        // console.log(direction)\r\n        // console.log('directionValue', directionValue)\r\n        console.log('add', add)\r\n        // console.log('remove', remove)\r\n        snakeCells.add(add)\r\n        if (add !== foodCell) {\r\n            snakeCells.delete(snakeList.remove().data)\r\n        } else {\r\n            var newFood = generateFood()\r\n            setFoodCell(newFood)\r\n            foodCell = newFood\r\n            score += 1\r\n            setScore(score)\r\n            // console.log('newFood',newFood)\r\n            // console.log('foodCell',foodCell)\r\n        }\r\n        var newSnakeCells = new Set(snakeCells);\r\n        // console.log('snake singlyLinkList', snakeList)\r\n        // console.log('newSnakeCells', newSnakeCells)\r\n        // console.log('snakeCells', snakeCells)\r\n        setSnakeCells(newSnakeCells)\r\n        currentDirection = direction\r\n        // console.log(direction)\r\n        // console.log(snakeCells)\r\n        // console.log(currentDirection)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', e => {\r\n            if (begin === false) return\r\n            var direction = e.key\r\n            if (direction !== restrictedDirection(currentDirection) && direction !== currentDirection) {\r\n                //setTimeout(()=>move(direction),1000)\r\n                move(direction)\r\n\r\n            }\r\n\r\n        })\r\n        console.log('currentDirection', currentDirection);\r\n        IntervalVar = setInterval(() => move(currentDirection), 400)\r\n        //window.setTimeout(()=>move(currentDirection),time+=1)\r\n    }, [])\r\n\r\n    function generateFood() {\r\n        //return randomInt(0, BOARD_SIZE * BOARD_SIZE - 1)\r\n        return Math.floor(Math.random() * (BOARD_SIZE * BOARD_SIZE - 1 - 0 + 1) + 0)\r\n    }\r\n\r\n    function restrictedDirection(direction) {\r\n        switch (direction) {\r\n            case 'ArrowRight':\r\n                return 'ArrowLeft'\r\n            case 'ArrowLeft':\r\n                return 'ArrowRight'\r\n            case 'ArrowUp':\r\n                return 'ArrowDown'\r\n            case 'ArrowDown':\r\n                return 'ArrowUp'\r\n            default:\r\n                return ''\r\n\r\n\r\n        }\r\n    }\r\n\r\n    function onStart() {\r\n        begin = true\r\n        setBegin(begin)\r\n\r\n    }\r\n    function reset() {\r\n        // setSnakeCells(new Set([43, 44]))\r\n        // snakeCells = new Set([43, 44])\r\n        // setSnakeList(new LinkedList([44, 43]))\r\n        // snakeList = new LinkedList([44, 43])\r\n        // setFoodCell(48)\r\n        // foodCell = 48\r\n        // setCurrentDirection('ArrowRight')\r\n        // currentDirection = 'ArrowRight'\r\n        // setScore(0)\r\n        // score = 0\r\n        // dead = false\r\n        // setDead(false)\r\n\r\n        // IntervalVar = setInterval(() => move(currentDirection), 1000)\r\n        window.location.reload()\r\n    }\r\n\r\n    \r\n    return (\r\n        <>\r\n\r\n            { !begin && <h1 className='alert'><button className='btn' onClick={onStart}>Start</button></h1>}\r\n            { dead && <h1 className='alert'>You're Dead, Score: {score} <button className='btn' onClick={reset}>Reset</button></h1>}\r\n            <div className=\"board\">\r\n                <p>Score:{score}</p>\r\n                {\r\n\r\n                    board.map((row, rowIndex) => (\r\n                        <div keu={rowIndex} className='row'>\r\n\r\n                            {row.map((cell, cellIndex) => (\r\n                                <div key={cellIndex} className={`cell ${cellType((rowIndex) * 10 + cellIndex)}`}></div>\r\n                            ))}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Board from './Board/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}